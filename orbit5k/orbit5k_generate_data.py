# -*- coding: utf-8 -*-
"""orbit5k_generate_data

Automatically generated by Colaboratory.
"""

import numpy as np
import tensorflow.compat.v2 as tf

tf.enable_v2_behavior()

"""# Generate Data"""

def _gen_orbit(num_pts_per_orbit, param):
    X = np.zeros([num_pts_per_orbit, 2])
    xcur, ycur = np.random.rand(), np.random.rand()
    for iPt in range(num_pts_per_orbit):
        xcur = (xcur + param * ycur * (1. - ycur)) % 1
        ycur = (ycur + param * xcur * (1. - xcur)) % 1
        X[iPt, :] = [xcur, ycur]
    return X


def generate_orbits(param_list, num_orbit_per_param, num_pts_per_orbit):
    count = 0
    X = np.zeros((num_orbit_per_param * len(param_list), num_pts_per_orbit, 2))
    y = np.zeros(num_orbit_per_param * len(param_list), dtype = 'int')
    for lab, r in enumerate(param_list):
        print("Generating", num_orbit_per_param, "orbits and diagrams for r = ", r, "...")
        for orbit in range(num_orbit_per_param):
            X[count, :, :] = _gen_orbit(num_pts_per_orbit=num_pts_per_orbit,
                  param=r)
            y[count] = lab
            count += 1
    return (X, y)


def noise(X, noise_prob):
    X_noise = np.copy(X)
    for orbit in range(len(X)):
        iNoise = np.where(np.random.binomial(n=1, p=noise_prob,
              size=len(X[orbit])))[0]
        X_noise[orbit][iNoise, :] = np.random.rand(len(iNoise),
              len(X[orbit][0]))
    return (X_noise)


def orbit5k_generate_data(param_list, num_orbit_per_param, num_pts_per_orbit,
      noise_prob_list, X_original_file_list, y_file):

    np.random.seed(0)

    X_signal, y = generate_orbits(param_list,
          num_orbit_per_param=num_orbit_per_param,
          num_pts_per_orbit=num_pts_per_orbit)

    np.save(y_file, y)

    nNoise = len(noise_prob_list)
    for iNoise in range(nNoise):
        X = noise(X_signal, noise_prob_list[iNoise])
        np.save(X_original_file_list[iNoise], X)

# noise_prob_list = [0.1]
noise_prob_list = [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35]
nNoise = len(noise_prob_list)
file_noise_list = [None] * nNoise
for iNoise in range(nNoise):
    file_noise_list[iNoise] = str(int(noise_prob_list[iNoise] * 100)).zfill(2)

X_original_file_list = [None] * nNoise
for iNoise in range(nNoise):
    X_original_file_list[iNoise] = (
          'orbit5k_X_original_' + file_noise_list[iNoise] + '.npy')
y_file = 'orbit5k_y.npy'

param_list = [2.5, 3.5, 4.0, 4.1, 4.3]
# num_orbit_per_param = 100
# num_pts_per_orbit = 100
num_orbit_per_param = 1000
num_pts_per_orbit = 1000

orbit5k_generate_data(param_list=param_list,
      num_orbit_per_param=num_orbit_per_param,
      num_pts_per_orbit=num_pts_per_orbit, noise_prob_list=noise_prob_list,
      X_original_file_list=X_original_file_list, y_file=y_file)